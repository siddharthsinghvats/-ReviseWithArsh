class Solution {
public:
    vector<int> largestDivisibleSubset(vector<int>& nums) {
        sort(nums.begin(),nums.end());
        int n = nums.size();
        int dp[n];
        for(int i =0;i<n;i++) dp[i]=1;
        vector<int>ans;
        for(int i =0;i<n;i++){
            int x = nums[i];
            for(int  j = 0;j<i;j++){
                if(x%nums[j]==0){
                    dp[i] = max(1+dp[j],dp[i]);
                }
            }
        }
        int maxm = * max_element(dp,dp+n);
        int i =0;
        for(;i<n;i++){
            if(dp[i]==maxm) break;
        }
        ans.push_back(nums[i]);
        maxm--;
        int x = nums[i];
        for(int j = i-1;j>=0;j--){
            if(x%nums[j]==0 && dp[j]==maxm){
                ans.push_back(nums[j]);
                x = nums[j];
                maxm--;
            }
        }
        return ans;
    }
};
