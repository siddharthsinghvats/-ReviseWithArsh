int mod = 1e9+7;
class Solution {
public:
    bool vis[300];
   long long dp[201];
   long long dis[201];
    vector<pair<int,long long> > adj[201];
    long long dfs(int x,int &n){
       if(dp[x]!=-1) return dp[x];
        vis[x]=1;
        if(x==n-1) return 1;
        long long ans =0;
        for(auto y: adj[x]){
            if(!vis[y.first]&& dis[y.first]+y.second==dis[x]){
                ans+=dfs(y.first,n);
                vis[y.first]=0;
            }
        }
        return dp[x]=ans%mod;
    }
    int countPaths(int n, vector<vector<int>>& roads) {
        ios_base::sync_with_stdio(false);
        cin.tie(0);
        cout.tie(0);
        for(auto x: roads){
            adj[x[0]].push_back({x[1],x[2]});
            adj[x[1]].push_back({x[0],x[2]});
        }
        for(int i =0;i<n;i++) dis[i] = INT_MAX;
        long long st;
        dis[n-1] = 0;
        priority_queue<pair<long long,int>, vector<pair<long long,int> > , greater<pair<long long,int> > >  pq;
        pq.push({0,n-1});
        while(pq.size()){
            auto x = pq.top();
            pq.pop();
            int u = x.second;
            int dist = x.first;

            for(auto v: adj[u]){
                if(dis[v.first]==INT_MAX || dis[v.first]>dis[u]+v.second){
                    dis[v.first] = dis[u]+v.second;
                    pq.push({dis[v.first], v.first});
                }
            }
        }
        memset(dp,-1,sizeof(dp));
        return dfs(0,n)%mod;

       
    }
};
